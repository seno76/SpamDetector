"""
–î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä—ã—Ç—ã—Ö –º–∞—Ä–∫–æ–≤—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN)
"""
import numpy as np
from hmmlearn import hmm
import joblib
from pathlib import Path

class SpamDetectorHMM:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∞–º–∞ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –¥–≤–µ HMM:
    - –æ–¥–Ω—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    - –æ–¥–Ω—É –¥–ª—è —Å–ø–∞–º-—Ç–µ–∫—Å—Ç–æ–≤
    """
    
    def __init__(self, n_states=6, n_iter=150, tol=1e-3, random_state=42, smoothing_eps=1e-6):
        """
        Args:
            n_states: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ HMM
            n_iter: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ë–∞—É–º–∞-–í–µ–ª—à–∞
            tol: –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            random_state: seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            smoothing_eps: —ç–ø—Å–∏–ª–æ–Ω –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        """
        self.n_states = n_states
        self.n_iter = n_iter
        self.tol = tol
        self.random_state = random_state
        self.smoothing_eps = float(smoothing_eps)
        
        self.natural_model = None
        self.spam_model = None
        
        self.n_features = None
        self.is_fitted = False
    
    def _prepare_sequences(self, sequences):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è hmmlearn
        """
        X = np.concatenate([seq.reshape(-1, 1) for seq in sequences])
        lengths = [len(seq) for seq in sequences]
        return X, lengths

    def _apply_smoothing(self, model):
        """
        –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ HMM: –∑–∞–º–µ–Ω—è–µ–º –Ω—É–ª–∏ –Ω–∞ eps –∏ –Ω–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.
        –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–µ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, –≤–µ–¥—É—â–∏–µ –∫ -inf –∏ NaN.
        """
        eps = self.smoothing_eps
        
        # startprob_
        sp = model.startprob_.clip(min=eps)
        model.startprob_ = sp / sp.sum()

        # transmat_
        tm = model.transmat_.clip(min=eps)
        tm = tm / tm.sum(axis=1, keepdims=True)
        model.transmat_ = tm

        # emissionprob_
        em = model.emissionprob_.clip(min=eps)
        em = em / em.sum(axis=1, keepdims=True)
        model.emissionprob_ = em

    def fit(self, natural_sequences, spam_sequences, n_features):
        """
        –û–±—É—á–µ–Ω–∏–µ –¥–≤—É—Ö HMM: –Ω–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö –∏ –Ω–∞ —Å–ø–∞–º–µ

        Args:
            natural_sequences: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            spam_sequences: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å–ø–∞–º-—Ç–µ–∫—Å—Ç–æ–≤
            n_features: –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (–∫–æ–ª-–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        """
        self.n_features = int(n_features)

        print(f"\nüîß –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –û–ë–´–ß–ù–´–• —Ç–µ–∫—Å—Ç–æ–≤...")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(natural_sequences)}")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–π: {self.n_states}, –ò—Ç–µ—Ä–∞—Ü–∏–π: {self.n_iter}")

        self.natural_model = hmm.CategoricalHMM(
            n_components=self.n_states,
            n_iter=self.n_iter,
            tol=self.tol,
            random_state=self.random_state,
            init_params="ste",  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º startprob, transmat, emissionprob
            params="ste"
        )
        # –ö—Ä–∏—Ç–∏—á–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞
        self.natural_model.n_features = self.n_features

        X_nat, len_nat = self._prepare_sequences(natural_sequences)
        self.natural_model.fit(X_nat, lengths=len_nat)
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω—É–ª–µ–π
        self._apply_smoothing(self.natural_model)
        nat_ll = self.natural_model.score(X_nat, len_nat)
        print(f"   ‚úì –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω—ã–π log-likelihood: {nat_ll:.2f}")
        # print(f"   ‚Üí emission shape (natural): {self.natural_model.emissionprob_.shape}")

        print(f"\nüîß –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –°–ü–ê–ú —Ç–µ–∫—Å—Ç–æ–≤...")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(spam_sequences)}")

        self.spam_model = hmm.CategoricalHMM(
            n_components=self.n_states,
            n_iter=self.n_iter,
            tol=self.tol,
            random_state=self.random_state,
            init_params="ste",
            params="ste"
        )
        self.spam_model.n_features = self.n_features

        X_spam, len_spam = self._prepare_sequences(spam_sequences)
        self.spam_model.fit(X_spam, lengths=len_spam)
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        self._apply_smoothing(self.spam_model)
        spam_ll = self.spam_model.score(X_spam, len_spam)
        print(f"   ‚úì –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω—ã–π log-likelihood: {spam_ll:.2f}")
        # print(f"   ‚Üí emission shape (spam): {self.spam_model.emissionprob_.shape}")

        self.is_fitted = True
        print("\n‚úì –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    @staticmethod
    def _safe_probs_from_logs(log_a, log_b):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –ª–æ–≥-–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–π –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ -inf, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å NaN.
        """
        a_inf = np.isneginf(log_a)
        b_inf = np.isneginf(log_b)

        # –û–±–∞ -inf ‚Üí —Ä–∞–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ 0.5/0.5
        if a_inf and b_inf:
            return 0.5, 0.5

        # –û–¥–∏–Ω -inf ‚Üí –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å 1.0
        if a_inf and not b_inf:
            return 0.0, 1.0
        if b_inf and not a_inf:
            return 1.0, 0.0

        # –û–±–∞ –∫–æ–Ω–µ—á–Ω—ã–µ ‚Üí —Å—Ç–∞–±–∏–ª—å–Ω—ã–π softmax —á–µ—Ä–µ–∑ log-sum-exp
        lse = np.logaddexp(log_a, log_b)  # log(exp(a)+exp(b))
        p_a = float(np.exp(log_a - lse))
        p_b = float(np.exp(log_b - lse))

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        if not np.isfinite(p_a) or not np.isfinite(p_b):
            return 0.5, 0.5

        return p_a, p_b
    
    def predict(self, sequences):
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        
        Args:
            sequences: —Å–ø–∏—Å–æ–∫ numpy arrays
        Returns:
            —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ('natural' –∏–ª–∏ 'spam')
        """
        predictions = []
        for seq in sequences:
            result = self.predict_proba(seq)
            predictions.append(result['prediction'])
        return predictions


    def predict_proba(self, sequence):
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        Args:
            sequence: numpy array —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (–∏–Ω–¥–µ–∫—Å—ã 0..n_features-1)
        Returns:
            dict —Å log-–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è–º–∏ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∫–ª–∞—Å—Å–æ–≤
        """
        if not self.is_fitted:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –í—ã–∑–æ–≤–∏—Ç–µ fit() —Å–Ω–∞—á–∞–ª–∞.")

        if sequence is None or len(sequence) == 0:
            # –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return {
                'log_prob_natural': float('-inf'),
                'log_prob_spam': float('-inf'),
                'prob_natural': 0.5,
                'prob_spam': 0.5,
                'prediction': 'natural'
            }

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–Ω–µ —Å–ª–æ–≤–∞—Ä—è
        max_idx = int(sequence.max())
        if max_idx >= self.n_features or sequence.min() < 0:
            # –ö–ª–∏–ø–ø–∏–Ω–≥ –∏–ª–∏ –æ—à–∏–±–∫–∞. –ö–ª–∏–ø–ø–∏–º –≤ UNK (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å).
            seq = sequence.copy()
            unk_idx = self.n_features - 1
            seq[seq >= self.n_features] = unk_idx
            seq[seq < 0] = unk_idx
            X = seq.reshape(-1, 1)
        else:
            X = sequence.reshape(-1, 1)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–æ–≥-–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–π
        try:
            log_prob_natural = float(self.natural_model.score(X))
        except Exception:
            log_prob_natural = float('-inf')

        try:
            log_prob_spam = float(self.spam_model.score(X))
        except Exception:
            log_prob_spam = float('-inf')

        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prob_natural, prob_spam = self._safe_probs_from_logs(log_prob_natural, log_prob_spam)

        return {
            'log_prob_natural': log_prob_natural,
            'log_prob_spam': log_prob_spam,
            'prob_natural': prob_natural,
            'prob_spam': prob_spam,
            'prediction': 'natural' if prob_natural >= prob_spam else 'spam'
        }

    def decode_viterbi(self, sequence, model_type='natural'):
        """
        –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –í–∏—Ç–µ—Ä–±–∏
        """
        model = self.natural_model if model_type == 'natural' else self.spam_model

        if sequence is None or len(sequence) == 0:
            return {
                'log_probability': float('-inf'),
                'states': np.array([], dtype=int),
                'n_states_used': 0
            }

        X = sequence.reshape(-1, 1)
        try:
            log_prob, states = model.decode(X, algorithm="viterbi")
            return {
                'log_probability': float(log_prob),
                'states': states,
                'n_states_used': len(np.unique(states))
            }
        except Exception:
            return {
                'log_probability': float('-inf'),
                'states': np.zeros(len(sequence), dtype=int),
                'n_states_used': 0
            }

    def get_posteriors(self, sequence, model_type='natural'):
        """
        –ü–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π gamma_t(i) –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ [T, n_states].
        """
        model = self.natural_model if model_type == 'natural' else self.spam_model
        if sequence is None or len(sequence) == 0:
            return np.zeros((0, self.n_states), dtype=float)
        X = sequence.reshape(-1, 1)
        try:
            gamma = model.predict_proba(X)
            return np.asarray(gamma)
        except Exception:
            return np.zeros((len(sequence), self.n_states), dtype=float)

    def get_transition_matrix(self, model_type='natural'):
        model = self.natural_model if model_type == 'natural' else self.spam_model
        return model.transmat_
    
    def get_emission_matrix(self, model_type='natural'):
        model = self.natural_model if model_type == 'natural' else self.spam_model
        return model.emissionprob_
    
    def save(self, path='models/'):
        Path(path).mkdir(parents=True, exist_ok=True)
        joblib.dump(self.natural_model, f'{path}/natural_model.pkl')
        joblib.dump(self.spam_model, f'{path}/spam_model.pkl')
        metadata = {
            'n_states': self.n_states,
            'n_features': self.n_features,
            'is_fitted': self.is_fitted,
            'smoothing_eps': self.smoothing_eps
        }
        joblib.dump(metadata, f'{path}/metadata.pkl')
        print(f"‚úì –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")
    
    def load(self, path='models/'):
        self.natural_model = joblib.load(f'{path}/natural_model.pkl')
        self.spam_model = joblib.load(f'{path}/spam_model.pkl')
        metadata = joblib.load(f'{path}/metadata.pkl')
        self.n_states = metadata['n_states']
        self.n_features = metadata['n_features']
        self.is_fitted = metadata['is_fitted']
        self.smoothing_eps = metadata.get('smoothing_eps', 1e-6)
        print(f"‚úì –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {path}")
